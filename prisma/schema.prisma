// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ChemicalMaterial {
  id   Int    @id @default(autoincrement())
  name String

  diseaseChemicalMaterials   DiseaseChemicalMaterial[]
  badHabitChemicalMaterials  BadHabitChemicalMaterial[]
  chemicalChemicalMaterials1 ChemicalChemicalMaterial[] @relation("ChemicalMaterial1")
  chemicalChemicalMaterials2 ChemicalChemicalMaterial[] @relation("ChemicalMaterial2")
  medicineChemicalMaterials  MedicineChemicalMaterial[]

  @@map("chemical_materials") // Optionally, you can specify the table name
}

model Disease {
  id   Int    @id @default(autoincrement())
  name String

  diseaseChemicalMaterials DiseaseChemicalMaterial[]
  PatientDisease           PatientDisease[]

  @@map("diseases")
}

model BadHabit {
  id   Int    @id @default(autoincrement())
  name String

  badHabitChemicalMaterials BadHabitChemicalMaterial[]
  PatientBadHabet           PatientBadHabet[]

  @@map("bad_habit")
}

model DiseaseChemicalMaterial {
  id                   Int              @id @default(autoincrement())
  chemical_material_id Int
  disease_id           Int
  disease              Disease          @relation(fields: [disease_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chemical_material    ChemicalMaterial @relation(fields: [chemical_material_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("diseases_chemical_materials")
}

model BadHabitChemicalMaterial {
  id                   Int              @id @default(autoincrement())
  chemical_material_id Int
  bad_habit_id         Int
  disease              BadHabit         @relation(fields: [bad_habit_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chemical_material    ChemicalMaterial @relation(fields: [chemical_material_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("bad_habits_chemical_materials")
}

model ChemicalChemicalMaterial {
  id                     Int              @id @default(autoincrement())
  chemical_material_1_id Int
  chemical_material_2_id Int
  chemical_material_1    ChemicalMaterial @relation("ChemicalMaterial1", fields: [chemical_material_1_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chemical_material_2    ChemicalMaterial @relation("ChemicalMaterial2", fields: [chemical_material_2_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("chemical_materials_chemical_materials")
}

model Medicine {
  id            Int    @id @default(autoincrement())
  name          String
  category_id   Int
  concentration Float

  category                     Category                       @relation("category", fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medicineChemicalMaterials    MedicineChemicalMaterial[]
  PatientMedicine              PatientMedicine[]
  PatientPerscrptionsMedicince PatientPerscrptionsMedicince[]

  @@map("medicines")
}

model MedicineChemicalMaterial {
  id                   Int @id @default(autoincrement())
  chemical_material_id Int
  medicine_id          Int

  medicine          Medicine         @relation(fields: [medicine_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chemical_material ChemicalMaterial @relation(fields: [chemical_material_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("medicines_chemical_materials")
}

model TreatmentType {
  id   Int    @id @default(autoincrement())
  name String

  treatments Treatment[]

  @@map("treatments_types")
}

model Treatment {
  id                    Int                     @id @default(autoincrement())
  name                  String
  price                 Float
  color                 String
  treatment_type_id     Int
  treatment_type        TreatmentType           @relation(fields: [treatment_type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  steps                 Step[]
  PatientCost           PatientCost[]
  PatientTeethTreatment PatientTeethTreatment[]
  PatientTreatment      PatientTreatment[]

  @@map("treatments")
}

model Step {
  id           Int       @id @default(autoincrement())
  name         String
  treatment_id Int
  treatment    Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  subSteps                 SubStep[]
  PatientTreatmentDoneStep PatientTreatmentDoneStep[]

  @@map("steps")
}

model SubStep {
  id      Int    @id @default(autoincrement())
  name    String
  step_id Int
  step    Step   @relation(fields: [step_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("subs_step")
}

model ProblemType {
  id   Int    @id @default(autoincrement())
  name String

  problems Problem[]

  @@map("problem_types")
}

model Problem {
  id              Int               @id @default(autoincrement())
  name            String
  problem_type_id Int
  Problem_type    ProblemType       @relation(fields: [problem_type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PatientDiagnose PatientDiagnose[]

  @@map("problems")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  medicines Medicine[] @relation("category")

  @@map("categories")
}

enum Gender {
  male
  female
}

model Patient {
  id                    Int                     @id @default(autoincrement())
  name                  String
  gender                Gender
  phone                 String?
  birth_date            DateTime?
  job                   String?
  main_complaint        String?
  maintal_status        String?
  address               String?
  created_at            DateTime                @default(now())
  PatientDisease        PatientDisease[]
  PatientBadHabet       PatientBadHabet[]
  PatientMedicine       PatientMedicine[]
  PatientCost           PatientCost[]
  PatientPayment        PatientPayment[]
  PatientDiagnose       PatientDiagnose[]
  PatientTeethTreatment PatientTeethTreatment[]
  PatientMedicalImage   PatientMedicalImage[]
  PatientAppointment    PatientAppointment[]
  PatientSession        PatientSession[]
  PatientReservation    PatientReservation[]
  PatientTreatment      PatientTreatment[]

  @@map("patients")
}

model PatientDisease {
  id         Int       @id @default(autoincrement())
  patient_id Int
  disease_id Int
  tight      Boolean
  notes      String?
  start_date DateTime?
  patient    Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  disease    Disease   @relation(fields: [disease_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients_diseases")
}

model PatientBadHabet {
  id           Int       @id @default(autoincrement())
  bad_habet_id Int
  patient_id   Int
  notes        String?
  start_date   DateTime?
  patient      Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bad_habet    BadHabit  @relation(fields: [bad_habet_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients_badHabits")
}

model PatientMedicine {
  id          Int       @id @default(autoincrement())
  medicine_id Int
  patient_id  Int
  notes       String?
  start_date  DateTime?
  patient     Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medicine    Medicine  @relation(fields: [medicine_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients_medicines")
}

model PatientMedicalImageType {
  id                  Int                   @id @default(autoincrement())
  name                String
  PatientMedicalImage PatientMedicalImage[]

  @@map("medical_images_types")
}

model PatientMedicalImage {
  id                    Int                     @id @default(autoincrement())
  src                   String
  title                 String
  medical_image_type_id Int
  patient_id            Int
  imageType             PatientMedicalImageType @relation(fields: [medical_image_type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patient               Patient                 @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at            DateTime                @default(now())

  @@map("medical_images")
}

model PatientCost {
  id           Int        @id @default(autoincrement())
  amount       Float
  description  String?
  treatment_id Int?
  patient_id   Int
  date         DateTime   @default(now())
  patient      Patient    @relation(fields: [patient_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  treatment    Treatment? @relation(fields: [treatment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("patients_costs")
}

model PatientPayment {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String?
  date        DateTime @default(now())
  patient_id  Int
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients_payments")
}

model PatientDiagnose {
  id                 Int     @id @default(autoincrement())
  place              String
  expected_treatment String?
  patient_id         Int
  problem_id         Int
  patient            Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  problem            Problem @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("diagnoses")
}

model Teeth {
  id                    Int                     @id @default(autoincrement())
  number                Int
  PatientTeethTreatment PatientTeethTreatment[]

  @@map("teeth")
}

model PatientTeethTreatment {
  id           Int       @id @default(autoincrement())
  patient_id   Int
  teeth_id     Int
  treatment_Id Int
  patient      Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  treatment    Treatment @relation(fields: [treatment_Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teeth        Teeth     @relation(fields: [teeth_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients_teeth")
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  bookins        BookIn[]
  storedproducts StoredProduct[]
  bookouts       BookOut[]

  @@map("products")
}

model BookIn {
  id          Int      @id @default(autoincrement())
  product_id  Int
  quantity    Int
  price       Int
  total_price Int
  created_at  DateTime @default(now())
  product     Product  @relation(fields: [product_id], references: [id])

  @@map("book_ins")
}

model StoredProduct {
  id              Int      @id @default(autoincrement())
  product_id      Int
  expiration_date DateTime
  quantity        Int
  price           Int
  total_quantity  Int
  product         Product  @relation(fields: [product_id], references: [id])

  @@map("stored_products")
}

model BookOut {
  id          Int      @id @default(autoincrement())
  product_id  Int
  quantity    Int
  total_price Int
  created_at  DateTime @default(now())
  product     Product  @relation(fields: [product_id], references: [id])

  @@map("book_outs")
}

enum Days {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}

model WorkingHours {
  id   Int      @id @default(autoincrement())
  day  Days?    @unique
  from DateTime
  to   DateTime
  open Boolean
}

model notifications {
  id      Int      @id @default(autoincrement())
  user_id Int
  date    DateTime
  msg     String
  seen    Boolean

  // user     User  @relation(fields: [user_id], references: [id])
}

enum AppointmentStates {
  registerd
  unregisterd
}

enum AppointmentTypes {
  normal
  waiting
  emergency
  external
}

model PatientAppointment {
  id         Int               @id @default(autoincrement())
  patient_id Int
  date       DateTime
  state      AppointmentStates
  type       AppointmentTypes
  place      String?
  phase      String?
  notes      String?

  patient        Patient          @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PatientSession PatientSession[]
}

model PatientSession {
  id                      Int @id @default(autoincrement())
  patient_id              Int
  patiient_appointment_id Int

  patient                  Patient                    @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patient_appointment      PatientAppointment         @relation(fields: [patiient_appointment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PatientTreatmentDoneStep PatientTreatmentDoneStep[]
  PatientLabOrder          PatientLabOrder[]
  PatientPerscrptions      PatientPerscrptions[]
}

model PatientReservation {
  id         Int      @id @default(autoincrement())
  patient_id Int
  date       DateTime
  notes      String?

  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PatientTreatmentTypes {
  teethly
  unteethly
}

model PatientTreatment {
  id           Int                   @id @default(autoincrement())
  patient_id   Int
  treatment_id Int
  place        String
  price        Float
  type         PatientTreatmentTypes

  patient                  Patient                    @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  treatment                Treatment                  @relation(fields: [treatment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PatientTreatmentDoneStep PatientTreatmentDoneStep[]
}

model PatientTreatmentDoneStep {
  id                   Int     @id @default(autoincrement())
  patient_treatment_id Int
  step_id              Int
  patient_session_id   Int
  note                 String?

  patient_treatment PatientTreatment @relation(fields: [patient_treatment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  step              Step             @relation(fields: [step_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  session           PatientSession   @relation(fields: [patient_session_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PatientLabOrder {
  id                 Int @id @default(autoincrement())
  patient_session_id Int
  lab_order_id       Int

  session PatientSession @relation(fields: [patient_session_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // lab_order LabOrder       @relation(fields: [lab_order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PatientPerscrptions {
  id                 Int @id @default(autoincrement())
  patient_session_id Int

  session                      PatientSession                 @relation(fields: [patient_session_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PatientPerscrptionsMedicince PatientPerscrptionsMedicince[]
}

model PatientPerscrptionsMedicince {
  id                     Int     @id @default(autoincrement())
  patient_perscrption_id Int
  medicince_id           Int
  qantity                String
  repetition             String
  description            String?

  perscrption PatientPerscrptions @relation(fields: [patient_perscrption_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medicince   Medicine            @relation(fields: [medicince_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// 
