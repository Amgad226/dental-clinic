// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ChemicalMaterial {
  id   Int    @id @default(autoincrement())
  name String

  diseaseChemicalMaterials   DiseaseChemicalMaterial[]
  badHabitChemicalMaterials  BadHabitChemicalMaterial[]
  chemicalChemicalMaterials1 ChemicalChemicalMaterial[] @relation("ChemicalMaterial1")
  chemicalChemicalMaterials2 ChemicalChemicalMaterial[] @relation("ChemicalMaterial2")
  medicineChemicalMaterials  MedicineChemicalMaterial[]

  @@map("chemical_materials") // Optionally, you can specify the table name
}

model Disease {
  id   Int    @id @default(autoincrement())
  name String

  diseaseChemicalMaterials DiseaseChemicalMaterial[]
  PatientDisease           PatientDisease[]

  @@map("diseases")
}

model BadHabit {
  id   Int    @id @default(autoincrement())
  name String

  badHabitChemicalMaterials BadHabitChemicalMaterial[]
  PatientBadHabet           PatientBadHabet[]

  @@map("bad_habit")
}

model DiseaseChemicalMaterial {
  id                   Int              @id @default(autoincrement())
  chemical_material_id Int
  disease_id           Int
  disease              Disease          @relation(fields: [disease_id], references: [id])
  chemical_material    ChemicalMaterial @relation(fields: [chemical_material_id], references: [id])

  @@map("diseases_chemical_materials")
}

model BadHabitChemicalMaterial {
  id                   Int              @id @default(autoincrement())
  chemical_material_id Int
  bad_habit_id         Int
  disease              BadHabit         @relation(fields: [bad_habit_id], references: [id])
  chemical_material    ChemicalMaterial @relation(fields: [chemical_material_id], references: [id])

  @@map("bad_habits_chemical_materials")
}

model ChemicalChemicalMaterial {
  id                     Int              @id @default(autoincrement())
  chemical_material_1_id Int
  chemical_material_2_id Int
  chemical_material_1    ChemicalMaterial @relation("ChemicalMaterial1", fields: [chemical_material_1_id], references: [id])
  chemical_material_2    ChemicalMaterial @relation("ChemicalMaterial2", fields: [chemical_material_2_id], references: [id])

  @@map("chemical_materials_chemical_materials")
}

model Medicine {
  id            Int    @id @default(autoincrement())
  name          String
  category_id   Int
  concentration Float

  category                  Category                   @relation("category", fields: [category_id], references: [id])
  medicineChemicalMaterials MedicineChemicalMaterial[]
  PatientMedicine           PatientMedicine[]

  @@map("medicines")
}

model MedicineChemicalMaterial {
  id                   Int @id @default(autoincrement())
  chemical_material_id Int
  medicine_id          Int

  medicine          Medicine         @relation(fields: [medicine_id], references: [id])
  chemical_material ChemicalMaterial @relation(fields: [chemical_material_id], references: [id])

  @@map("medicines_chemical_materials")
}

model TreatmentType {
  id   Int    @id @default(autoincrement())
  name String

  treatments Treatment[]

  @@map("treatments_types")
}

model Treatment {
  id                Int           @id @default(autoincrement())
  name              String
  price             Float
  color             String
  treatment_type_id Int
  treatment_type    TreatmentType @relation(fields: [treatment_type_id], references: [id])

  steps                 Step[]
  PatientCost           PatientCost[]
  PatientPayment        PatientPayment[]
  patientTeethTreatment patientTeethTreatment[]

  @@map("treatments")
}

model Step {
  id           Int       @id @default(autoincrement())
  name         String
  treatment_id Int
  treatment    Treatment @relation(fields: [treatment_id], references: [id])

  subSteps SubStep[]

  @@map("steps")
}

model SubStep {
  id      Int    @id @default(autoincrement())
  name    String
  step_id Int
  step    Step   @relation(fields: [step_id], references: [id])

  @@map("subs_step")
}

model ProblemType {
  id   Int    @id @default(autoincrement())
  name String

  problems Problem[]

  @@map("problem_types")
}

model Problem {
  id              Int         @id @default(autoincrement())
  name            String
  problem_type_id Int
  Problem_type    ProblemType @relation(fields: [problem_type_id], references: [id])
  Diagnose        Diagnose[]

  @@map("problems")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  medicines Medicine[] @relation("category")
}

enum Gender {
  male
  female
}

model Patient {
  id                    Int                     @id @default(autoincrement())
  name                  String
  gender                Gender
  phone                 String?
  birthdate             DateTime?
  Job                   String?
  main_complaint        String?
  main_status           String?
  created_at            DateTime                @default(now())
  PatientDisease        PatientDisease[]
  PatientBadHabet       PatientBadHabet[]
  PatientMedicine       PatientMedicine[]
  PatientCost           PatientCost[]
  PatientPayment        PatientPayment[]
  Diagnose              Diagnose[]
  patientTeethTreatment patientTeethTreatment[]

  @@map("patients")
}

model PatientDisease {
  id         Int     @id @default(autoincrement())
  paitent_id Int
  disease_id Int
  paitent    Patient @relation(fields: [paitent_id], references: [id])
  disease    Disease @relation(fields: [disease_id], references: [id])
}

model PatientBadHabet {
  id           Int      @id @default(autoincrement())
  bad_habet_id Int
  paitent_id   Int
  paitent      Patient  @relation(fields: [paitent_id], references: [id])
  bad_habet    BadHabit @relation(fields: [bad_habet_id], references: [id])
}

model PatientMedicine {
  id          Int      @id @default(autoincrement())
  medicine_id Int
  paitent_id  Int
  paitent     Patient  @relation(fields: [paitent_id], references: [id])
  bad_habet   Medicine @relation(fields: [medicine_id], references: [id])
}

model MedicalImageType {
  id           Int            @id @default(autoincrement())
  name         String
  MedicalImage MedicalImage[]
}

model MedicalImage {
  id                    Int              @id @default(autoincrement())
  src                   String
  medical_image_type_id Int
  imageType             MedicalImageType @relation(fields: [medical_image_type_id], references: [id])
  created_at            DateTime         @default(now())
}

model PatientCost {
  id           Int      @id @default(autoincrement())
  amount       Float
  description  String?
  treatment_id Int?
  paitent_id   Int?
  data         DateTime @default(now())

  paitent   Patient?   @relation(fields: [paitent_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  treatment Treatment? @relation(fields: [treatment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model PatientPayment {
  id           Int      @id @default(autoincrement())
  amount       Float
  description  String?
  data         DateTime @default(now())
  paitent_id   Int
  treatment_Id Int?

  paitent   Patient    @relation(fields: [paitent_id], references: [id])
  Treatment Treatment? @relation(fields: [treatment_Id], references: [id])
}

model Diagnose {
  id                 Int     @id @default(autoincrement())
  paitent_id         Int
  problem_id         Int
  expected_treatment String?
  paitent            Patient @relation(fields: [paitent_id], references: [id])
  problem            Problem @relation(fields: [problem_id], references: [id])
}

model teeth {
  id                    Int                     @id @default(autoincrement())
  number                Int
  patientTeethTreatment patientTeethTreatment[]
}

model patientTeethTreatment {
  id           Int       @id @default(autoincrement())
  paitent_id   Int
  teeth_id     Int
  treatment_Id Int
  paitent      Patient   @relation(fields: [paitent_id], references: [id])
  treatment    Treatment @relation(fields: [treatment_Id], references: [id])
  teeth        teeth     @relation(fields: [teeth_id], references: [id])
}

// 
